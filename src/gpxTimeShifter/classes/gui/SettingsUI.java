/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import io.jenetics.jpx.GPX;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.ZonedDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author alazar
 */
public class SettingsUI extends javax.swing.JDialog {

    /**
     * Creates new form SettingsUI
     */
    public SettingsUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        timeOffsetBox = new javax.swing.JComboBox<>();
        chooseFile = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fileNewName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GPX file time shifter");

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel1.setText("GPX file:");

        filePath.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        filePath.setText(System.getProperty("user.home")+File.separator+"Downloads"+File.separator);
        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText("Shift time stamps by");

        timeOffsetBox.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        timeOffsetBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-2h", "-1h", "+1h", "+2h" }));
        timeOffsetBox.setSelectedIndex(2);
        timeOffsetBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeOffsetBoxActionPerformed(evt);
            }
        });

        chooseFile.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        chooseFile.setText("Choose file");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        ok.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel3.setText("New file name:");

        fileNewName.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        fileNewName.setText("Choose the file first.");
        fileNewName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancel)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filePath))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeOffsetBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fileNewName, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fileNewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(timeOffsetBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFile)
                    .addComponent(ok)
                    .addComponent(cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timeOffsetBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeOffsetBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeOffsetBoxActionPerformed

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        
        FileNameExtensionFilter txtFilter = new FileNameExtensionFilter("gps extension","gpx");
        chooseFile.addChoosableFileFilter(txtFilter);       
        chooseFile.setCurrentDirectory(new File(filePath.getText()));
        chooseFile.setAcceptAllFileFilterUsed(false);
        chooseFile.setMultiSelectionEnabled(false);
        chooseFile.setFileFilter(txtFilter);
        
        int result = -1;
        result = chooseFile.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String file = chooseFile.getSelectedFile().getPath();
            filePath.setText(file); 
            String oldName = chooseFile.getSelectedFile().getName();
            String newName = oldName.substring(0,oldName.lastIndexOf(".gpx"));
            fileNewName.setText(newName+"_V2.gpx");
            String DirRoot = file.substring(0,file.lastIndexOf(File.separator));
            File doc = new File(DirRoot+File.separator+fileNewName.getText());
            int i = 3;
            while (doc.exists()) {
                fileNewName.setText(newName+"_V"+i+".gpx");
                doc = new File(DirRoot+File.separator+fileNewName.getText());
                i++;
            }
        } 
    }//GEN-LAST:event_chooseFileActionPerformed

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        final GPX gpx;
        if (timeOffsetBox.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select a time offset option.");return;
        }
        if (!filePath.getText().endsWith("gpx")) {
            JOptionPane.showMessageDialog(this, "Please choose a *.gpx file");
            return;
        }
        try {
            gpx = GPX.read(Paths.get(filePath.getText()));
            
            final GPX gpx1 = gpx.toBuilder()
            .trackFilter()
                .map(track -> track.toBuilder()
                    .map(segment -> segment.toBuilder()
                        .map(wp -> wp.toBuilder()
                            .time(wp.getTime()
                                .map(t -> {return shiftTime(t,timeOffsetBox);} )
                                .orElse(null))
                            .build())
                        .build())
                    .build())
                .build()
            .build();
            String newPath = filePath.getText();
            if (newPath.contains(File.separator)) newPath = newPath.substring(0,newPath.lastIndexOf(File.separator));
            if (fileNewName.getText().isBlank() || fileNewName.getText().isEmpty() || !fileNewName.getText().endsWith(".gpx")) {
                JOptionPane.showMessageDialog(this, "Please choose a new file name that ends with '.gpx'.");return;
            }
            Path newGpx = Paths.get(newPath+File.separator+fileNewName.getText());
            GPX.write(gpx1, newGpx);
        } catch (IOException ex) {
            Logger.getLogger(SettingsUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "New file generated.");
    }//GEN-LAST:event_okActionPerformed
    
    private static ZonedDateTime shiftTime(ZonedDateTime time, JComboBox<String> timeOffsetBox) {
        ZonedDateTime newT = null;
        switch (timeOffsetBox.getSelectedIndex()) {
            case 0:
                newT = time.minusHours(2);break;
            case 1:
                newT = time.minusHours(1);break;
            case 2:
                newT = time.plusHours(1);break;
            case 3:
                newT = time.plusHours(2);break;
            default:
                System.err.println("Index of BoxItems is wrong");break;
        }
        return newT;
    }
    
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelActionPerformed

    private void fileNewNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNewNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SettingsUI dialog = new SettingsUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton chooseFile;
    private javax.swing.JTextField fileNewName;
    private javax.swing.JTextField filePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton ok;
    private javax.swing.JComboBox<String> timeOffsetBox;
    // End of variables declaration//GEN-END:variables
}
